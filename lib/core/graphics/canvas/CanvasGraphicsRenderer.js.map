{"version":3,"sources":["../../../../src/core/graphics/canvas/CanvasGraphicsRenderer.js"],"names":["CanvasGraphicsRenderer","renderer","render","graphics","context","worldAlpha","transform","worldTransform","resolution","_prevTint","tint","dirty","setTransform","a","b","c","d","tx","ty","updateGraphicsTint","setBlendMode","blendMode","i","graphicsData","length","data","shape","fillColor","_fillTint","lineColor","_lineTint","lineWidth","type","SHAPES","POLY","beginPath","renderPolygon","points","closed","j","holes","fill","globalAlpha","fillAlpha","fillStyle","toString","substr","lineAlpha","strokeStyle","stroke","RECT","fillRect","x","y","width","height","strokeRect","CIRC","arc","radius","Math","PI","closePath","ELIP","w","h","kappa","ox","oy","xe","ye","xm","ym","moveTo","bezierCurveTo","RREC","rx","ry","maxRadius","min","lineTo","quadraticCurveTo","tintR","tintG","tintB","close","destroy","CanvasRenderer","registerPlugin"],"mappings":"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","file":"CanvasGraphicsRenderer.js","sourcesContent":["import CanvasRenderer from '../../renderers/canvas/CanvasRenderer';\nimport { SHAPES } from '../../const';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class CanvasGraphicsRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders a Graphics object to a canvas.\n     *\n     * @param {PIXI.Graphics} graphics - the actual graphics object to render\n     */\n    render(graphics)\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n        const worldAlpha = graphics.worldAlpha;\n        const transform = graphics.transform.worldTransform;\n        const resolution = renderer.resolution;\n\n         // if the tint has changed, set the graphics object to dirty.\n        if (this._prevTint !== this.tint)\n        {\n            this.dirty = true;\n        }\n\n        context.setTransform(\n            transform.a * resolution,\n            transform.b * resolution,\n            transform.c * resolution,\n            transform.d * resolution,\n            transform.tx * resolution,\n            transform.ty * resolution\n        );\n\n        if (graphics.dirty)\n        {\n            this.updateGraphicsTint(graphics);\n            graphics.dirty = false;\n        }\n\n        renderer.setBlendMode(graphics.blendMode);\n\n        for (let i = 0; i < graphics.graphicsData.length; i++)\n        {\n            const data = graphics.graphicsData[i];\n            const shape = data.shape;\n\n            const fillColor = data._fillTint;\n            const lineColor = data._lineTint;\n\n            context.lineWidth = data.lineWidth;\n\n            if (data.type === SHAPES.POLY)\n            {\n                context.beginPath();\n\n                this.renderPolygon(shape.points, shape.closed, context);\n\n                for (let j = 0; j < data.holes.length; j++)\n                {\n                    this.renderPolygon(data.holes[j].points, true, context);\n                }\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fillRect(shape.x, shape.y, shape.width, shape.height);\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.strokeRect(shape.x, shape.y, shape.width, shape.height);\n                }\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.beginPath();\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                context.beginPath();\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w;           // x-end\n                const ye = y + h;           // y-end\n                const xm = x + (w / 2);       // x-middle\n                const ym = y + (h / 2);       // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.beginPath();\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the tint of a graphics object\n     *\n     * @private\n     * @param {PIXI.Graphics} graphics - the graphics that will have its tint updated\n     */\n    updateGraphicsTint(graphics)\n    {\n        graphics._prevTint = graphics.tint;\n\n        const tintR = ((graphics.tint >> 16) & 0xFF) / 255;\n        const tintG = ((graphics.tint >> 8) & 0xFF) / 255;\n        const tintB = (graphics.tint & 0xFF) / 255;\n\n        for (let i = 0; i < graphics.graphicsData.length; ++i)\n        {\n            const data = graphics.graphicsData[i];\n\n            const fillColor = data.fillColor | 0;\n            const lineColor = data.lineColor | 0;\n\n            // super inline cos im an optimization NAZI :)\n            data._fillTint = (\n                (((fillColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((fillColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((fillColor & 0xFF) / 255) * tintB * 255)\n            );\n\n            data._lineTint = (\n                (((lineColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((lineColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((lineColor & 0xFF) / 255) * tintB * 255)\n            );\n        }\n    }\n\n    /**\n     * Renders a polygon.\n     *\n     * @param {PIXI.Point[]} points - The points to render\n     * @param {boolean} close - Should the polygon be closed\n     * @param {CanvasRenderingContext2D} context - The rendering context to use\n     */\n    renderPolygon(points, close, context)\n    {\n        context.moveTo(points[0], points[1]);\n\n        for (let j = 1; j < points.length / 2; ++j)\n        {\n            context.lineTo(points[j * 2], points[(j * 2) + 1]);\n        }\n\n        if (close)\n        {\n            context.closePath();\n        }\n    }\n\n    /**\n     * destroy graphics object\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\nCanvasRenderer.registerPlugin('graphics', CanvasGraphicsRenderer);\n"]}