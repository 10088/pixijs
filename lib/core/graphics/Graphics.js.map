{"version":3,"sources":["../../../src/core/graphics/Graphics.js"],"names":["canvasRenderer","tempMatrix","Matrix","tempPoint","Point","tempColor1","Float32Array","tempColor2","Graphics","nativeLines","fillAlpha","lineWidth","lineColor","graphicsData","tint","_prevTint","blendMode","BLEND_MODES","NORMAL","currentPath","_webGL","isMask","boundsPadding","_localBounds","Bounds","dirty","fastRectDirty","clearDirty","boundsDirty","cachedSpriteDirty","_spriteRect","_fastRect","clone","renderable","i","length","push","updateLocalBounds","lineStyle","color","alpha","lineAlpha","shape","points","Polygon","slice","closed","drawShape","moveTo","x","y","lineTo","quadraticCurveTo","cpX","cpY","toX","toY","n","xa","ya","fromX","fromY","j","bezierCurveTo","cpX2","cpY2","arcTo","x1","y1","x2","y2","radius","a1","b1","a2","b2","mm","Math","abs","dd","cc","tt","k1","sqrt","k2","j1","j2","cx","cy","px","py","qx","qy","startAngle","atan2","endAngle","arc","anticlockwise","PI","sweep","segs","ceil","startX","cos","startY","sin","theta","theta2","cTheta","sTheta","segMinus","remainder","real","angle","c","s","beginFill","filling","fillColor","fill","endFill","drawRect","width","height","Rectangle","drawRoundedRect","RoundedRectangle","drawCircle","Circle","drawEllipse","Ellipse","drawPolygon","path","Array","isArray","arguments","clear","isFastRect","type","SHAPES","RECT","_renderWebGL","renderer","_renderSpriteRect","setObjectRenderer","plugins","graphics","render","rect","Sprite","Texture","WHITE","sprite","t1","t2","worldAlpha","texture","_frame","transform","worldTransform","anchor","set","_onAnchorUpdate","_renderCanvas","_calculateBounds","lb","_bounds","addFrame","minX","minY","maxX","maxY","containsPoint","point","applyInverse","data","contains","Infinity","w","h","RREC","CIRC","ELIP","dx","dy","rw","rh","padding","pop","GraphicsData","POLY","generateCanvasTexture","scaleMode","resolution","bounds","getLocalBounds","canvasBuffer","RenderTexture","create","CanvasRenderer","updateLocalTransform","localTransform","copy","invert","tx","ty","fromCanvas","baseTexture","_canvasRenderTarget","canvas","update","closePath","close","addHole","hole","destroy","options","id","_webgl","Container","_SPRITE_TEXTURE"],"mappings":"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","file":"Graphics.js","sourcesContent":["import Container from '../display/Container';\nimport RenderTexture from '../textures/RenderTexture';\nimport Texture from '../textures/Texture';\nimport GraphicsData from './GraphicsData';\nimport Sprite from '../sprites/Sprite';\nimport { Matrix, Point, Rectangle, RoundedRectangle, Ellipse, Polygon, Circle } from '../math';\nimport { hex2rgb, rgb2hex } from '../utils';\nimport { SHAPES, BLEND_MODES } from '../const';\nimport Bounds from '../display/Bounds';\nimport bezierCurveTo from './utils/bezierCurveTo';\nimport CanvasRenderer from '../renderers/canvas/CanvasRenderer';\n\nlet canvasRenderer;\nconst tempMatrix = new Matrix();\nconst tempPoint = new Point();\nconst tempColor1 = new Float32Array(4);\nconst tempColor2 = new Float32Array(4);\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport default class Graphics extends Container\n{\n    /**\n     *\n     * @param {boolean} [nativeLines=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     */\n    constructor(nativeLines = false)\n    {\n        super();\n\n        /**\n         * The alpha value used when filling the Graphics object.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.fillAlpha = 1;\n\n        /**\n         * The width (thickness) of any lines drawn.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.lineWidth = 0;\n\n        /**\n         * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n         *\n         * @member {boolean}\n         */\n        this.nativeLines = nativeLines;\n\n        /**\n         * The color of any lines drawn.\n         *\n         * @member {string}\n         * @default 0\n         */\n        this.lineColor = 0;\n\n        /**\n         * Graphics data\n         *\n         * @member {PIXI.GraphicsData[]}\n         * @private\n         */\n        this.graphicsData = [];\n\n        /**\n         * The tint applied to the graphic shape. This is a hex value. Apply a value of 0xFFFFFF to\n         * reset the tint.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this.tint = 0xFFFFFF;\n\n        /**\n         * The previous tint applied to the graphic shape. Used to compare to the current tint and\n         * check if theres change.\n         *\n         * @member {number}\n         * @private\n         * @default 0xFFFFFF\n         */\n        this._prevTint = 0xFFFFFF;\n\n        /**\n         * The blend mode to be applied to the graphic shape. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * Current path\n         *\n         * @member {PIXI.GraphicsData}\n         * @private\n         */\n        this.currentPath = null;\n\n        /**\n         * Array containing some WebGL-related properties used by the WebGL renderer.\n         *\n         * @member {object<number, object>}\n         * @private\n         */\n        // TODO - _webgl should use a prototype object, not a random undocumented object...\n        this._webGL = {};\n\n        /**\n         * Whether this shape is being used as a mask.\n         *\n         * @member {boolean}\n         */\n        this.isMask = false;\n\n        /**\n         * The bounds' padding used for bounds calculation.\n         *\n         * @member {number}\n         */\n        this.boundsPadding = 0;\n\n        /**\n         * A cache of the local bounds to prevent recalculation.\n         *\n         * @member {PIXI.Rectangle}\n         * @private\n         */\n        this._localBounds = new Bounds();\n\n        /**\n         * Used to detect if the graphics object has changed. If this is set to true then the graphics\n         * object will be recalculated.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this.dirty = 0;\n\n        /**\n         * Used to detect if we need to do a fast rect check using the id compare method\n         * @type {Number}\n         */\n        this.fastRectDirty = -1;\n\n        /**\n         * Used to detect if we clear the graphics webGL data\n         * @type {Number}\n         */\n        this.clearDirty = 0;\n\n        /**\n         * Used to detect if we we need to recalculate local bounds\n         * @type {Number}\n         */\n        this.boundsDirty = -1;\n\n        /**\n         * Used to detect if the cached sprite object needs to be updated.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this.cachedSpriteDirty = false;\n\n        this._spriteRect = null;\n        this._fastRect = false;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         *\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that the only the properties of the object are cloned, not its transform (position,scale,etc)\n     *\n     * @return {PIXI.Graphics} A clone of the graphics object\n     */\n    clone()\n    {\n        const clone = new Graphics();\n\n        clone.renderable = this.renderable;\n        clone.fillAlpha = this.fillAlpha;\n        clone.lineWidth = this.lineWidth;\n        clone.lineColor = this.lineColor;\n        clone.tint = this.tint;\n        clone.blendMode = this.blendMode;\n        clone.isMask = this.isMask;\n        clone.boundsPadding = this.boundsPadding;\n        clone.dirty = 0;\n        clone.cachedSpriteDirty = this.cachedSpriteDirty;\n\n        // copy graphics data\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            clone.graphicsData.push(this.graphicsData[i].clone());\n        }\n\n        clone.currentPath = clone.graphicsData[clone.graphicsData.length - 1];\n\n        clone.updateLocalBounds();\n\n        return clone;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @param {number} [lineWidth=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [color=0] - color of the line to draw, will update the objects stored style\n     * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineStyle(lineWidth = 0, color = 0, alpha = 1)\n    {\n        this.lineWidth = lineWidth;\n        this.lineColor = color;\n        this.lineAlpha = alpha;\n\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length)\n            {\n                // halfway through a line? start a new one!\n                const shape = new Polygon(this.currentPath.shape.points.slice(-2));\n\n                shape.closed = false;\n\n                this.drawShape(shape);\n            }\n            else\n            {\n                // otherwise its empty so lets just set the line properties\n                this.currentPath.lineWidth = this.lineWidth;\n                this.currentPath.lineColor = this.lineColor;\n                this.currentPath.lineAlpha = this.lineAlpha;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     *\n     * @param {number} x - the X coordinate to move to\n     * @param {number} y - the Y coordinate to move to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    moveTo(x, y)\n    {\n        const shape = new Polygon([x, y]);\n\n        shape.closed = false;\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     *\n     * @param {number} x - the X coordinate to draw to\n     * @param {number} y - the Y coordinate to draw to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineTo(x, y)\n    {\n        this.currentPath.shape.points.push(x, y);\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    quadraticCurveTo(cpX, cpY, toX, toY)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length === 0)\n            {\n                this.currentPath.shape.points = [0, 0];\n            }\n        }\n        else\n        {\n            this.moveTo(0, 0);\n        }\n\n        const n = 20;\n        const points = this.currentPath.shape.points;\n        let xa = 0;\n        let ya = 0;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length === 0)\n            {\n                this.currentPath.shape.points = [0, 0];\n            }\n        }\n        else\n        {\n            this.moveTo(0, 0);\n        }\n\n        const points = this.currentPath.shape.points;\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        points.length -= 2;\n\n        bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, points);\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @param {number} x1 - The x-coordinate of the beginning of the arc\n     * @param {number} y1 - The y-coordinate of the beginning of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    arcTo(x1, y1, x2, y2, radius)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length === 0)\n            {\n                this.currentPath.shape.points.push(x1, y1);\n            }\n        }\n        else\n        {\n            this.moveTo(x1, y1);\n        }\n\n        const points = this.currentPath.shape.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n        }\n        else\n        {\n            const dd = (a1 * a1) + (b1 * b1);\n            const cc = (a2 * a2) + (b2 * b2);\n            const tt = (a1 * a2) + (b1 * b2);\n            const k1 = radius * Math.sqrt(dd) / mm;\n            const k2 = radius * Math.sqrt(cc) / mm;\n            const j1 = k1 * tt / dd;\n            const j2 = k2 * tt / cc;\n            const cx = (k1 * b2) + (k2 * b1);\n            const cy = (k1 * a2) + (k2 * a1);\n            const px = b1 * (k2 + j1);\n            const py = a1 * (k2 + j1);\n            const qx = b2 * (k1 + j2);\n            const qy = a2 * (k1 + j2);\n            const startAngle = Math.atan2(py - cy, px - cx);\n            const endAngle = Math.atan2(qy - cy, qx - cx);\n\n            this.arc(cx + x1, cy + y1, radius, startAngle, endAngle, b1 * a2 > b2 * a1);\n        }\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    arc(cx, cy, radius, startAngle, endAngle, anticlockwise = false)\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += Math.PI * 2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += Math.PI * 2;\n        }\n\n        const sweep = endAngle - startAngle;\n        const segs = Math.ceil(Math.abs(sweep) / (Math.PI * 2)) * 40;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.shape.points : null;\n\n        if (points)\n        {\n            if (points[points.length - 2] !== startX || points[points.length - 1] !== startY)\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.shape.points;\n        }\n\n        const theta = sweep / (segs * 2);\n        const theta2 = theta * 2;\n\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n\n        const segMinus = segs - 1;\n\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n\n            const angle = ((theta) + startAngle + (theta2 * real));\n\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     *\n     * @param {number} [color=0] - the color of the fill\n     * @param {number} [alpha=1] - the alpha of the fill\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginFill(color = 0, alpha = 1)\n    {\n        this.filling = true;\n        this.fillColor = color;\n        this.fillAlpha = alpha;\n\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length <= 2)\n            {\n                this.currentPath.fill = this.filling;\n                this.currentPath.fillColor = this.fillColor;\n                this.currentPath.fillAlpha = this.fillAlpha;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    endFill()\n    {\n        this.filling = false;\n        this.fillColor = null;\n        this.fillAlpha = 1;\n\n        return this;\n    }\n\n    /**\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawRect(x, y, width, height)\n    {\n        this.drawShape(new Rectangle(x, y, width, height));\n\n        return this;\n    }\n\n    /**\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @param {number} radius - Radius of the rectangle corners\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawRoundedRect(x, y, width, height, radius)\n    {\n        this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n\n        return this;\n    }\n\n    /**\n     * Draws a circle.\n     *\n     * @param {number} x - The X coordinate of the center of the circle\n     * @param {number} y - The Y coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawCircle(x, y, radius)\n    {\n        this.drawShape(new Circle(x, y, radius));\n\n        return this;\n    }\n\n    /**\n     * Draws an ellipse.\n     *\n     * @param {number} x - The X coordinate of the center of the ellipse\n     * @param {number} y - The Y coordinate of the center of the ellipse\n     * @param {number} width - The half width of the ellipse\n     * @param {number} height - The half height of the ellipse\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawEllipse(x, y, width, height)\n    {\n        this.drawShape(new Ellipse(x, y, width, height));\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon using the given path.\n     *\n     * @param {number[]|PIXI.Point[]} path - The path data used to construct the polygon.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawPolygon(path)\n    {\n        // prevents an argument assignment deopt\n        // see section 3.1: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n        let points = path;\n\n        let closed = true;\n\n        if (points instanceof Polygon)\n        {\n            closed = points.closed;\n            points = points.points;\n        }\n\n        if (!Array.isArray(points))\n        {\n            // prevents an argument leak deopt\n            // see section 3.2: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n            points = new Array(arguments.length);\n\n            for (let i = 0; i < points.length; ++i)\n            {\n                points[i] = arguments[i]; // eslint-disable-line prefer-rest-params\n            }\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closed = closed;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    clear()\n    {\n        if (this.lineWidth || this.filling || this.graphicsData.length > 0)\n        {\n            this.lineWidth = 0;\n            this.filling = false;\n\n            this.boundsDirty = -1;\n            this.dirty++;\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n\n        this.currentPath = null;\n        this._spriteRect = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     *\n     * @returns {boolean} True if only 1 rect.\n     */\n    isFastRect()\n    {\n        return this.graphicsData.length === 1\n            && this.graphicsData[0].shape.type === SHAPES.RECT\n            && !this.graphicsData[0].lineWidth;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.WebGLRenderer} renderer - The renderer\n     */\n    _renderWebGL(renderer)\n    {\n        // if the sprite is not visible or the alpha is 0 then no need to render this element\n        if (this.dirty !== this.fastRectDirty)\n        {\n            this.fastRectDirty = this.dirty;\n            this._fastRect = this.isFastRect();\n        }\n\n        // TODO this check can be moved to dirty?\n        if (this._fastRect)\n        {\n            this._renderSpriteRect(renderer);\n        }\n        else\n        {\n            renderer.setObjectRenderer(renderer.plugins.graphics);\n            renderer.plugins.graphics.render(this);\n        }\n    }\n\n    /**\n     * Renders a sprite rectangle.\n     *\n     * @private\n     * @param {PIXI.WebGLRenderer} renderer - The renderer\n     */\n    _renderSpriteRect(renderer)\n    {\n        const rect = this.graphicsData[0].shape;\n\n        if (!this._spriteRect)\n        {\n            this._spriteRect = new Sprite(new Texture(Texture.WHITE));\n        }\n\n        const sprite = this._spriteRect;\n\n        if (this.tint === 0xffffff)\n        {\n            sprite.tint = this.graphicsData[0].fillColor;\n        }\n        else\n        {\n            const t1 = tempColor1;\n            const t2 = tempColor2;\n\n            hex2rgb(this.graphicsData[0].fillColor, t1);\n            hex2rgb(this.tint, t2);\n\n            t1[0] *= t2[0];\n            t1[1] *= t2[1];\n            t1[2] *= t2[2];\n\n            sprite.tint = rgb2hex(t1);\n        }\n        sprite.alpha = this.graphicsData[0].fillAlpha;\n        sprite.worldAlpha = this.worldAlpha * sprite.alpha;\n        sprite.blendMode = this.blendMode;\n\n        sprite.texture._frame.width = rect.width;\n        sprite.texture._frame.height = rect.height;\n\n        sprite.transform.worldTransform = this.transform.worldTransform;\n\n        sprite.anchor.set(-rect.x / rect.width, -rect.y / rect.height);\n        sprite._onAnchorUpdate();\n\n        sprite._renderWebGL(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas renderer\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer)\n    {\n        if (this.isMask === true)\n        {\n            return;\n        }\n\n        renderer.plugins.graphics.render(this);\n    }\n\n    /**\n     * Retrieves the bounds of the graphic shape as a rectangle object\n     *\n     * @private\n     */\n    _calculateBounds()\n    {\n        if (this.boundsDirty !== this.dirty)\n        {\n            this.boundsDirty = this.dirty;\n            this.updateLocalBounds();\n\n            this.cachedSpriteDirty = true;\n        }\n\n        const lb = this._localBounds;\n\n        this._bounds.addFrame(this.transform, lb.minX, lb.minY, lb.maxX, lb.maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     *\n     * @param {PIXI.Point} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const graphicsData = this.graphicsData;\n\n        for (let i = 0; i < graphicsData.length; ++i)\n        {\n            const data = graphicsData[i];\n\n            if (!data.fill)\n            {\n                continue;\n            }\n\n            // only deal with fills..\n            if (data.shape)\n            {\n                if (data.shape.contains(tempPoint.x, tempPoint.y))\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Update the bounds of the object\n     *\n     */\n    updateLocalBounds()\n    {\n        let minX = Infinity;\n        let maxX = -Infinity;\n\n        let minY = Infinity;\n        let maxY = -Infinity;\n\n        if (this.graphicsData.length)\n        {\n            let shape = 0;\n            let x = 0;\n            let y = 0;\n            let w = 0;\n            let h = 0;\n\n            for (let i = 0; i < this.graphicsData.length; i++)\n            {\n                const data = this.graphicsData[i];\n                const type = data.type;\n                const lineWidth = data.lineWidth;\n\n                shape = data.shape;\n\n                if (type === SHAPES.RECT || type === SHAPES.RREC)\n                {\n                    x = shape.x - (lineWidth / 2);\n                    y = shape.y - (lineWidth / 2);\n                    w = shape.width + lineWidth;\n                    h = shape.height + lineWidth;\n\n                    minX = x < minX ? x : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y < minY ? y : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else if (type === SHAPES.CIRC)\n                {\n                    x = shape.x;\n                    y = shape.y;\n                    w = shape.radius + (lineWidth / 2);\n                    h = shape.radius + (lineWidth / 2);\n\n                    minX = x - w < minX ? x - w : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y - h < minY ? y - h : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else if (type === SHAPES.ELIP)\n                {\n                    x = shape.x;\n                    y = shape.y;\n                    w = shape.width + (lineWidth / 2);\n                    h = shape.height + (lineWidth / 2);\n\n                    minX = x - w < minX ? x - w : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y - h < minY ? y - h : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else\n                {\n                    // POLY\n                    const points = shape.points;\n                    let x2 = 0;\n                    let y2 = 0;\n                    let dx = 0;\n                    let dy = 0;\n                    let rw = 0;\n                    let rh = 0;\n                    let cx = 0;\n                    let cy = 0;\n\n                    for (let j = 0; j + 2 < points.length; j += 2)\n                    {\n                        x = points[j];\n                        y = points[j + 1];\n                        x2 = points[j + 2];\n                        y2 = points[j + 3];\n                        dx = Math.abs(x2 - x);\n                        dy = Math.abs(y2 - y);\n                        h = lineWidth;\n                        w = Math.sqrt((dx * dx) + (dy * dy));\n\n                        if (w < 1e-9)\n                        {\n                            continue;\n                        }\n\n                        rw = ((h / w * dy) + dx) / 2;\n                        rh = ((h / w * dx) + dy) / 2;\n                        cx = (x2 + x) / 2;\n                        cy = (y2 + y) / 2;\n\n                        minX = cx - rw < minX ? cx - rw : minX;\n                        maxX = cx + rw > maxX ? cx + rw : maxX;\n\n                        minY = cy - rh < minY ? cy - rh : minY;\n                        maxY = cy + rh > maxY ? cy + rh : maxY;\n                    }\n                }\n            }\n        }\n        else\n        {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n\n        const padding = this.boundsPadding;\n\n        this._localBounds.minX = minX - padding;\n        this._localBounds.maxX = maxX + (padding * 2);\n\n        this._localBounds.minY = minY - padding;\n        this._localBounds.maxY = maxY + (padding * 2);\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @return {PIXI.GraphicsData} The generated GraphicsData object.\n     */\n    drawShape(shape)\n    {\n        if (this.currentPath)\n        {\n            // check current path!\n            if (this.currentPath.shape.points.length <= 2)\n            {\n                this.graphicsData.pop();\n            }\n        }\n\n        this.currentPath = null;\n\n        const data = new GraphicsData(\n            this.lineWidth,\n            this.lineColor,\n            this.lineAlpha,\n            this.fillColor,\n            this.fillAlpha,\n            this.filling,\n            this.nativeLines,\n            shape\n        );\n\n        this.graphicsData.push(data);\n\n        if (data.type === SHAPES.POLY)\n        {\n            data.shape.closed = data.shape.closed || this.filling;\n            this.currentPath = data;\n        }\n\n        this.dirty++;\n\n        return data;\n    }\n\n    /**\n     * Generates a canvas texture.\n     *\n     * @param {number} scaleMode - The scale mode of the texture.\n     * @param {number} resolution - The resolution of the texture.\n     * @return {PIXI.Texture} The new texture.\n     */\n    generateCanvasTexture(scaleMode, resolution = 1)\n    {\n        const bounds = this.getLocalBounds();\n\n        const canvasBuffer = RenderTexture.create(bounds.width, bounds.height, scaleMode, resolution);\n\n        if (!canvasRenderer)\n        {\n            canvasRenderer = new CanvasRenderer();\n        }\n\n        this.transform.updateLocalTransform();\n        this.transform.localTransform.copy(tempMatrix);\n\n        tempMatrix.invert();\n\n        tempMatrix.tx -= bounds.x;\n        tempMatrix.ty -= bounds.y;\n\n        canvasRenderer.render(this, canvasBuffer, true, tempMatrix);\n\n        const texture = Texture.fromCanvas(canvasBuffer.baseTexture._canvasRenderTarget.canvas, scaleMode);\n\n        texture.baseTexture.resolution = resolution;\n        texture.baseTexture.update();\n\n        return texture;\n    }\n\n    /**\n     * Closes the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    closePath()\n    {\n        // ok so close path assumes next one is a hole!\n        const currentPath = this.currentPath;\n\n        if (currentPath && currentPath.shape)\n        {\n            currentPath.shape.close();\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a hole in the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    addHole()\n    {\n        // this is a hole!\n        const hole = this.graphicsData.pop();\n\n        this.currentPath = this.graphicsData[this.graphicsData.length - 1];\n\n        this.currentPath.addHole(hole.shape);\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        // destroy each of the GraphicsData objects\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            this.graphicsData[i].destroy();\n        }\n\n        // for each webgl data entry, destroy the WebGLGraphicsData\n        for (const id in this._webgl)\n        {\n            for (let j = 0; j < this._webgl[id].data.length; ++j)\n            {\n                this._webgl[id].data[j].destroy();\n            }\n        }\n\n        if (this._spriteRect)\n        {\n            this._spriteRect.destroy();\n        }\n\n        this.graphicsData = null;\n\n        this.currentPath = null;\n        this._webgl = null;\n        this._localBounds = null;\n    }\n\n}\n\nGraphics._SPRITE_TEXTURE = null;\n"]}