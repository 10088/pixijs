{"version":3,"sources":["../../../../../src/core/renderers/webgl/managers/FilterManager.js"],"names":["filterTransforms","FilterState","renderTarget","sourceFrame","Rectangle","destinationFrame","filters","target","resolution","FilterManager","renderer","gl","quad","Quad","state","attribState","shaderCache","pool","filterData","pushFilter","_activeRenderTarget","filterStack","filterState","size","index","stack","currentState","padding","targetBounds","filterArea","getBounds","x","y","width","height","transform","autoFit","fit","pad","getPotRenderTarget","setFrame","bindRenderTarget","clear","popFilter","lastState","map","upload","length","apply","freePotRenderTarget","flip","flop","i","t","applyFilter","filter","input","output","shader","glShaders","CONTEXT_UID","glShaderKey","Shader","vertexSrc","fragmentSrc","bindVao","initVao","vao","disable","SCISSOR_TEST","enable","maskManager","scissorRenderTarget","pushScissorMask","scissorData","bindShader","tex","emptyTextures","boundTextures","syncUniforms","setBlendMode","blendMode","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texture","draw","TRIANGLES","_glTextures","uniformData","uniforms","textureCount","filterClamp","type","baseTexture","bind","a","undefined","toArray","val","Float32Array","data","value","getRenderTarget","returnRenderTarget","calculateScreenSpaceMatrix","outputMatrix","calculateNormalizedScreenSpaceMatrix","calculateSpriteMatrix","sprite","destroy","emptyPool","minWidth","minHeight","bitTwiddle","nextPow2","key","pop","RenderTarget","defaultFrame","textures","j","push","WebGLManager"],"mappings":"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","file":"FilterManager.js","sourcesContent":["import WebGLManager from './WebGLManager';\nimport RenderTarget from '../utils/RenderTarget';\nimport Quad from '../utils/Quad';\nimport { Rectangle } from '../../../math';\nimport Shader from '../../../Shader';\nimport * as filterTransforms from '../filters/filterTransforms';\nimport bitTwiddle from 'bit-twiddle';\n\n/**\n * @ignore\n * @class\n */\nclass FilterState\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        this.renderTarget = null;\n        this.sourceFrame = new Rectangle();\n        this.destinationFrame = new Rectangle();\n        this.filters = [];\n        this.target = null;\n        this.resolution = 1;\n    }\n}\n\n/**\n * @class\n * @memberof PIXI\n * @extends PIXI.WebGLManager\n */\nexport default class FilterManager extends WebGLManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.gl = this.renderer.gl;\n        // know about sprites!\n        this.quad = new Quad(this.gl, renderer.state.attribState);\n\n        this.shaderCache = {};\n        // todo add default!\n        this.pool = {};\n\n        this.filterData = null;\n    }\n\n    /**\n     * Adds a new filter to the manager.\n     *\n     * @param {PIXI.DisplayObject} target - The target of the filter to render.\n     * @param {PIXI.Filter[]} filters - The filters to apply.\n     */\n    pushFilter(target, filters)\n    {\n        const renderer = this.renderer;\n\n        let filterData = this.filterData;\n\n        if (!filterData)\n        {\n            filterData = this.renderer._activeRenderTarget.filterStack;\n\n            // add new stack\n            const filterState = new FilterState();\n\n            filterState.sourceFrame = filterState.destinationFrame = this.renderer._activeRenderTarget.size;\n            filterState.renderTarget = renderer._activeRenderTarget;\n\n            this.renderer._activeRenderTarget.filterData = filterData = {\n                index: 0,\n                stack: [filterState],\n            };\n\n            this.filterData = filterData;\n        }\n\n        // get the current filter state..\n        let currentState = filterData.stack[++filterData.index];\n\n        if (!currentState)\n        {\n            currentState = filterData.stack[filterData.index] = new FilterState();\n        }\n\n        // for now we go off the filter of the first resolution..\n        const resolution = filters[0].resolution;\n        const padding = filters[0].padding | 0;\n        const targetBounds = target.filterArea || target.getBounds(true);\n        const sourceFrame = currentState.sourceFrame;\n        const destinationFrame = currentState.destinationFrame;\n\n        sourceFrame.x = ((targetBounds.x * resolution) | 0) / resolution;\n        sourceFrame.y = ((targetBounds.y * resolution) | 0) / resolution;\n        sourceFrame.width = ((targetBounds.width * resolution) | 0) / resolution;\n        sourceFrame.height = ((targetBounds.height * resolution) | 0) / resolution;\n\n        if (filterData.stack[0].renderTarget.transform)\n        { //\n\n            // TODO we should fit the rect around the transform..\n        }\n        else if (filters[0].autoFit)\n        {\n            sourceFrame.fit(filterData.stack[0].destinationFrame);\n        }\n\n        // lets apply the padding After we fit the element to the screen.\n        // this should stop the strange side effects that can occur when cropping to the edges\n        sourceFrame.pad(padding);\n\n        destinationFrame.width = sourceFrame.width;\n        destinationFrame.height = sourceFrame.height;\n\n        // lets play the padding after we fit the element to the screen.\n        // this should stop the strange side effects that can occur when cropping to the edges\n\n        const renderTarget = this.getPotRenderTarget(renderer.gl, sourceFrame.width, sourceFrame.height, resolution);\n\n        currentState.target = target;\n        currentState.filters = filters;\n        currentState.resolution = resolution;\n        currentState.renderTarget = renderTarget;\n\n        // bind the render target to draw the shape in the top corner..\n\n        renderTarget.setFrame(destinationFrame, sourceFrame);\n\n        // bind the render target\n        renderer.bindRenderTarget(renderTarget);\n        renderTarget.clear();\n    }\n\n    /**\n     * Pops off the filter and applies it.\n     *\n     */\n    popFilter()\n    {\n        const filterData = this.filterData;\n\n        const lastState = filterData.stack[filterData.index - 1];\n        const currentState = filterData.stack[filterData.index];\n\n        this.quad.map(currentState.renderTarget.size, currentState.sourceFrame).upload();\n\n        const filters = currentState.filters;\n\n        if (filters.length === 1)\n        {\n            filters[0].apply(this, currentState.renderTarget, lastState.renderTarget, false, currentState);\n            this.freePotRenderTarget(currentState.renderTarget);\n        }\n        else\n        {\n            let flip = currentState.renderTarget;\n            let flop = this.getPotRenderTarget(\n                this.renderer.gl,\n                currentState.sourceFrame.width,\n                currentState.sourceFrame.height,\n                currentState.resolution\n            );\n\n            flop.setFrame(currentState.destinationFrame, currentState.sourceFrame);\n\n            // finally lets clear the render target before drawing to it..\n            flop.clear();\n\n            let i = 0;\n\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                filters[i].apply(this, flip, flop, true, currentState);\n\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, lastState.renderTarget, false, currentState);\n\n            this.freePotRenderTarget(flip);\n            this.freePotRenderTarget(flop);\n        }\n\n        filterData.index--;\n\n        if (filterData.index === 0)\n        {\n            this.filterData = null;\n        }\n    }\n\n    /**\n     * Draws a filter.\n     *\n     * @param {PIXI.Filter} filter - The filter to draw.\n     * @param {PIXI.RenderTarget} input - The input render target.\n     * @param {PIXI.RenderTarget} output - The target to output to.\n     * @param {boolean} clear - Should the output be cleared before rendering to it\n     */\n    applyFilter(filter, input, output, clear)\n    {\n        const renderer = this.renderer;\n        const gl = renderer.gl;\n\n        let shader = filter.glShaders[renderer.CONTEXT_UID];\n\n        // cacheing..\n        if (!shader)\n        {\n            if (filter.glShaderKey)\n            {\n                shader = this.shaderCache[filter.glShaderKey];\n\n                if (!shader)\n                {\n                    shader = new Shader(this.gl, filter.vertexSrc, filter.fragmentSrc);\n\n                    filter.glShaders[renderer.CONTEXT_UID] = this.shaderCache[filter.glShaderKey] = shader;\n                }\n            }\n            else\n            {\n                shader = filter.glShaders[renderer.CONTEXT_UID] = new Shader(this.gl, filter.vertexSrc, filter.fragmentSrc);\n            }\n\n            // TODO - this only needs to be done once?\n            renderer.bindVao(null);\n\n            this.quad.initVao(shader);\n        }\n\n        renderer.bindVao(this.quad.vao);\n\n        renderer.bindRenderTarget(output);\n\n        if (clear)\n        {\n            gl.disable(gl.SCISSOR_TEST);\n            renderer.clear();// [1, 1, 1, 1]);\n            gl.enable(gl.SCISSOR_TEST);\n        }\n\n        // in case the render target is being masked using a scissor rect\n        if (output === renderer.maskManager.scissorRenderTarget)\n        {\n            renderer.maskManager.pushScissorMask(null, renderer.maskManager.scissorData);\n        }\n\n        renderer.bindShader(shader);\n\n        // free unit 0 for us, doesn't matter what was there\n        // don't try to restore it, because syncUniforms can upload it to another slot\n        // and it'll be a problem\n        const tex = this.renderer.emptyTextures[0];\n\n        this.renderer.boundTextures[0] = tex;\n        // this syncs the pixi filters  uniforms with glsl uniforms\n        this.syncUniforms(shader, filter);\n\n        renderer.state.setBlendMode(filter.blendMode);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, input.texture.texture);\n\n        this.quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);\n\n        gl.bindTexture(gl.TEXTURE_2D, tex._glTextures[this.renderer.CONTEXT_UID].texture);\n    }\n\n    /**\n     * Uploads the uniforms of the filter.\n     *\n     * @param {GLShader} shader - The underlying gl shader.\n     * @param {PIXI.Filter} filter - The filter we are synchronizing.\n     */\n    syncUniforms(shader, filter)\n    {\n        const uniformData = filter.uniformData;\n        const uniforms = filter.uniforms;\n\n        // 0 is reserved for the pixi texture so we start at 1!\n        let textureCount = 1;\n        let currentState;\n\n        // filterArea and filterClamp that are handled by FilterManager directly\n        // they must not appear in uniformData\n\n        if (shader.uniforms.filterArea)\n        {\n            currentState = this.filterData.stack[this.filterData.index];\n\n            const filterArea = shader.uniforms.filterArea;\n\n            filterArea[0] = currentState.renderTarget.size.width;\n            filterArea[1] = currentState.renderTarget.size.height;\n            filterArea[2] = currentState.sourceFrame.x;\n            filterArea[3] = currentState.sourceFrame.y;\n\n            shader.uniforms.filterArea = filterArea;\n        }\n\n        // use this to clamp displaced texture coords so they belong to filterArea\n        // see displacementFilter fragment shader for an example\n        if (shader.uniforms.filterClamp)\n        {\n            currentState = currentState || this.filterData.stack[this.filterData.index];\n\n            const filterClamp = shader.uniforms.filterClamp;\n\n            filterClamp[0] = 0;\n            filterClamp[1] = 0;\n            filterClamp[2] = (currentState.sourceFrame.width - 1) / currentState.renderTarget.size.width;\n            filterClamp[3] = (currentState.sourceFrame.height - 1) / currentState.renderTarget.size.height;\n\n            shader.uniforms.filterClamp = filterClamp;\n        }\n\n        // TODO Cacheing layer..\n        for (const i in uniformData)\n        {\n            if (uniformData[i].type === 'sampler2D' && uniforms[i] !== 0)\n            {\n                if (uniforms[i].baseTexture)\n                {\n                    shader.uniforms[i] = this.renderer.bindTexture(uniforms[i].baseTexture, textureCount);\n                }\n                else\n                {\n                    shader.uniforms[i] = textureCount;\n\n                    // TODO\n                    // this is helpful as renderTargets can also be set.\n                    // Although thinking about it, we could probably\n                    // make the filter texture cache return a RenderTexture\n                    // rather than a renderTarget\n                    const gl = this.renderer.gl;\n\n                    this.renderer.boundTextures[textureCount] = this.renderer.emptyTextures[textureCount];\n                    gl.activeTexture(gl.TEXTURE0 + textureCount);\n\n                    uniforms[i].texture.bind();\n                }\n\n                textureCount++;\n            }\n            else if (uniformData[i].type === 'mat3')\n            {\n                // check if its pixi matrix..\n                if (uniforms[i].a !== undefined)\n                {\n                    shader.uniforms[i] = uniforms[i].toArray(true);\n                }\n                else\n                {\n                    shader.uniforms[i] = uniforms[i];\n                }\n            }\n            else if (uniformData[i].type === 'vec2')\n            {\n                // check if its a point..\n                if (uniforms[i].x !== undefined)\n               {\n                    const val = shader.uniforms[i] || new Float32Array(2);\n\n                    val[0] = uniforms[i].x;\n                    val[1] = uniforms[i].y;\n                    shader.uniforms[i] = val;\n                }\n                else\n               {\n                    shader.uniforms[i] = uniforms[i];\n                }\n            }\n            else if (uniformData[i].type === 'float')\n            {\n                if (shader.uniforms.data[i].value !== uniformData[i])\n                {\n                    shader.uniforms[i] = uniforms[i];\n                }\n            }\n            else\n            {\n                shader.uniforms[i] = uniforms[i];\n            }\n        }\n    }\n\n    /**\n     * Gets a render target from the pool, or creates a new one.\n     *\n     * @param {boolean} clear - Should we clear the render texture when we get it?\n     * @param {number} resolution - The resolution of the target.\n     * @return {PIXI.RenderTarget} The new render target\n     */\n    getRenderTarget(clear, resolution)\n    {\n        const currentState = this.filterData.stack[this.filterData.index];\n        const renderTarget = this.getPotRenderTarget(\n            this.renderer.gl,\n            currentState.sourceFrame.width,\n            currentState.sourceFrame.height,\n            resolution || currentState.resolution\n        );\n\n        renderTarget.setFrame(currentState.destinationFrame, currentState.sourceFrame);\n\n        return renderTarget;\n    }\n\n    /**\n     * Returns a render target to the pool.\n     *\n     * @param {PIXI.RenderTarget} renderTarget - The render target to return.\n     */\n    returnRenderTarget(renderTarget)\n    {\n        this.freePotRenderTarget(renderTarget);\n    }\n\n    /**\n     * Calculates the mapped matrix.\n     *\n     * TODO playing around here.. this is temporary - (will end up in the shader)\n     * this returns a matrix that will normalise map filter cords in the filter to screen space\n     *\n     * @param {PIXI.Matrix} outputMatrix - the matrix to output to.\n     * @return {PIXI.Matrix} The mapped matrix.\n     */\n    calculateScreenSpaceMatrix(outputMatrix)\n    {\n        const currentState = this.filterData.stack[this.filterData.index];\n\n        return filterTransforms.calculateScreenSpaceMatrix(\n            outputMatrix,\n            currentState.sourceFrame,\n            currentState.renderTarget.size\n        );\n    }\n\n    /**\n     * Multiply vTextureCoord to this matrix to achieve (0,0,1,1) for filterArea\n     *\n     * @param {PIXI.Matrix} outputMatrix - The matrix to output to.\n     * @return {PIXI.Matrix} The mapped matrix.\n     */\n    calculateNormalizedScreenSpaceMatrix(outputMatrix)\n    {\n        const currentState = this.filterData.stack[this.filterData.index];\n\n        return filterTransforms.calculateNormalizedScreenSpaceMatrix(\n            outputMatrix,\n            currentState.sourceFrame,\n            currentState.renderTarget.size,\n            currentState.destinationFrame\n        );\n    }\n\n    /**\n     * This will map the filter coord so that a texture can be used based on the transform of a sprite\n     *\n     * @param {PIXI.Matrix} outputMatrix - The matrix to output to.\n     * @param {PIXI.Sprite} sprite - The sprite to map to.\n     * @return {PIXI.Matrix} The mapped matrix.\n     */\n    calculateSpriteMatrix(outputMatrix, sprite)\n    {\n        const currentState = this.filterData.stack[this.filterData.index];\n\n        return filterTransforms.calculateSpriteMatrix(\n            outputMatrix,\n            currentState.sourceFrame,\n            currentState.renderTarget.size,\n            sprite\n        );\n    }\n\n    /**\n     * Destroys this Filter Manager.\n     *\n     */\n    destroy()\n    {\n        this.shaderCache = {};\n        this.emptyPool();\n    }\n\n    /**\n     * Gets a Power-of-Two render texture.\n     *\n     * TODO move to a seperate class could be on renderer?\n     * also - could cause issue with multiple contexts?\n     *\n     * @private\n     * @param {WebGLRenderingContext} gl - The webgl rendering context\n     * @param {number} minWidth - The minimum width of the render target.\n     * @param {number} minHeight - The minimum height of the render target.\n     * @param {number} resolution - The resolution of the render target.\n     * @return {PIXI.RenderTarget} The new render target.\n     */\n    getPotRenderTarget(gl, minWidth, minHeight, resolution)\n    {\n        // TODO you could return a bigger texture if there is not one in the pool?\n        minWidth = bitTwiddle.nextPow2(minWidth * resolution);\n        minHeight = bitTwiddle.nextPow2(minHeight * resolution);\n\n        const key = ((minWidth & 0xFFFF) << 16) | (minHeight & 0xFFFF);\n\n        if (!this.pool[key])\n        {\n            this.pool[key] = [];\n        }\n\n        let renderTarget = this.pool[key].pop();\n\n        // creating render target will cause texture to be bound!\n        if (!renderTarget)\n        {\n            // temporary bypass cache..\n            const tex = this.renderer.boundTextures[0];\n\n            gl.activeTexture(gl.TEXTURE0);\n\n            // internally - this will cause a texture to be bound..\n            renderTarget = new RenderTarget(gl, minWidth, minHeight, null, 1);\n\n            // set the current one back\n            gl.bindTexture(gl.TEXTURE_2D, tex._glTextures[this.renderer.CONTEXT_UID].texture);\n        }\n\n        // manually tweak the resolution...\n        // this will not modify the size of the frame buffer, just its resolution.\n        renderTarget.resolution = resolution;\n        renderTarget.defaultFrame.width = renderTarget.size.width = minWidth / resolution;\n        renderTarget.defaultFrame.height = renderTarget.size.height = minHeight / resolution;\n\n        return renderTarget;\n    }\n\n    /**\n     * Empties the texture pool.\n     *\n     */\n    emptyPool()\n    {\n        for (const i in this.pool)\n        {\n            const textures = this.pool[i];\n\n            if (textures)\n            {\n                for (let j = 0; j < textures.length; j++)\n                {\n                    textures[j].destroy(true);\n                }\n            }\n        }\n\n        this.pool = {};\n    }\n\n    /**\n     * Frees a render target back into the pool.\n     *\n     * @param {PIXI.RenderTarget} renderTarget - The renderTarget to free\n     */\n    freePotRenderTarget(renderTarget)\n    {\n        const minWidth = renderTarget.size.width * renderTarget.resolution;\n        const minHeight = renderTarget.size.height * renderTarget.resolution;\n        const key = ((minWidth & 0xFFFF) << 16) | (minHeight & 0xFFFF);\n\n        this.pool[key].push(renderTarget);\n    }\n}\n"]}