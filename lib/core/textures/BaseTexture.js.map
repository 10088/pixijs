{"version":3,"sources":["../../../src/core/textures/BaseTexture.js"],"names":["BaseTexture","source","scaleMode","resolution","uid","touched","settings","RESOLUTION","width","height","realWidth","realHeight","undefined","SCALE_MODE","hasLoaded","isLoading","origSource","imageType","sourceScale","premultipliedAlpha","imageUrl","isPowerOfTwo","mipmap","MIPMAP_TEXTURES","wrapMode","WRAP_MODE","_glTextures","_enabled","_virtalBoundId","loadSource","_destroyed","update","naturalWidth","videoWidth","naturalHeight","videoHeight","_updateDimensions","emit","bitTwiddle","isPow2","wasLoading","onload","onerror","firstSourceLoaded","src","complete","getContext","_updateImageType","_loadSvgSource","_sourceLoaded","scope","dataUri","mediaType","firstSubType","subType","split","Error","_loadSvgSourceUsingDataUri","_loadSvgSourceUsingXhr","svgString","encoding","atob","data","_loadSvgSourceUsingString","svgXhr","XMLHttpRequest","readyState","DONE","status","response","open","send","svgSize","svgWidth","svgHeight","Math","round","canvas","document","createElement","_pixiId","drawImage","BaseTextureCache","destroy","TextureCache","navigator","isCocoonJS","dispose","updateSourceImage","newSrc","fromImage","crossorigin","baseTexture","image","Image","indexOf","crossOrigin","fromCanvas","from","HTMLImageElement","HTMLCanvasElement","EventEmitter"],"mappings":"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","file":"BaseTexture.js","sourcesContent":["import {\n    uid, getUrlFileExtension, decomposeDataUri, getSvgSize,\n    getResolutionOfUrl, BaseTextureCache, TextureCache,\n} from '../utils';\nimport settings from '../settings';\nimport EventEmitter from 'eventemitter3';\nimport determineCrossOrigin from '../utils/determineCrossOrigin';\nimport bitTwiddle from 'bit-twiddle';\n\n/**\n * A texture stores the information that represents an image. All textures have a base texture.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class BaseTexture extends EventEmitter\n{\n    /**\n     * @param {HTMLImageElement|HTMLCanvasElement} [source] - the source object of the texture.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture\n     */\n    constructor(source, scaleMode, resolution)\n    {\n        super();\n\n        this.uid = uid();\n\n        this.touched = 0;\n\n        /**\n         * The resolution / device pixel ratio of the texture\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = resolution || settings.RESOLUTION;\n\n        /**\n         * The width of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.width = 100;\n\n        /**\n         * The height of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.height = 100;\n\n        // TODO docs\n        // used to store the actual dimensions of the source\n        /**\n         * Used to store the actual width of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.realWidth = 100;\n        /**\n         * Used to store the actual height of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.realHeight = 100;\n\n        /**\n         * The scale mode to apply when scaling this texture\n         *\n         * @member {number}\n         * @default PIXI.settings.SCALE_MODE\n         * @see PIXI.SCALE_MODES\n         */\n        this.scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n\n        /**\n         * Set to true once the base texture has successfully loaded.\n         *\n         * This is never true if the underlying source fails to load or has no texture data.\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.hasLoaded = false;\n\n        /**\n         * Set to true if the source is currently loading.\n         *\n         * If an Image source is loading the 'loaded' or 'error' event will be\n         * dispatched when the operation ends. An underyling source that is\n         * immediately-available bypasses loading entirely.\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.isLoading = false;\n\n        /**\n         * The image source that is used to create the texture.\n         *\n         * TODO: Make this a setter that calls loadSource();\n         *\n         * @readonly\n         * @member {HTMLImageElement|HTMLCanvasElement}\n         */\n        this.source = null; // set in loadSource, if at all\n\n        /**\n         * The image source that is used to create the texture. This is used to\n         * store the original Svg source when it is replaced with a canvas element.\n         *\n         * TODO: Currently not in use but could be used when re-scaling svg.\n         *\n         * @readonly\n         * @member {Image}\n         */\n        this.origSource = null; // set in loadSvg, if at all\n\n        /**\n         * Type of image defined in source, eg. `png` or `svg`\n         *\n         * @readonly\n         * @member {string}\n         */\n        this.imageType = null; // set in updateImageType\n\n        /**\n         * Scale for source image. Used with Svg images to scale them before rasterization.\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.sourceScale = 1.0;\n\n        /**\n         * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)\n         * All blend modes, and shaders written for default value. Change it on your own risk.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.premultipliedAlpha = true;\n\n        /**\n         * The image url of the texture\n         *\n         * @member {string}\n         */\n        this.imageUrl = null;\n\n        /**\n         * Whether or not the texture is a power of two, try to use power of two textures as much\n         * as you can\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.isPowerOfTwo = false;\n\n        // used for webGL\n\n        /**\n         *\n         * Set this to true if a mipmap of this texture needs to be generated. This value needs\n         * to be set before the texture is used\n         * Also the texture must be a power of two size to work\n         *\n         * @member {boolean}\n         * @see PIXI.MIPMAP_TEXTURES\n         */\n        this.mipmap = settings.MIPMAP_TEXTURES;\n\n        /**\n         *\n         * WebGL Texture wrap mode\n         *\n         * @member {number}\n         * @see PIXI.WRAP_MODES\n         */\n        this.wrapMode = settings.WRAP_MODE;\n\n        /**\n         * A map of renderer IDs to webgl textures\n         *\n         * @private\n         * @member {object<number, WebGLTexture>}\n         */\n        this._glTextures = {};\n\n        this._enabled = 0;\n        this._virtalBoundId = -1;\n\n        // if no source passed don't try to load\n        if (source)\n        {\n            this.loadSource(source);\n        }\n\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean}\n         * @private\n         * @readonly\n         */\n        this._destroyed = false;\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         *\n         * @protected\n         * @event loaded\n         * @memberof PIXI.BaseTexture#\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         *\n         * @protected\n         * @event error\n         * @memberof PIXI.BaseTexture#\n         */\n    }\n\n    /**\n     * Updates the texture on all the webgl renderers, this also assumes the src has changed.\n     *\n     * @fires update\n     */\n    update()\n    {\n        // Svg size is handled during load\n        if (this.imageType !== 'svg')\n        {\n            this.realWidth = this.source.naturalWidth || this.source.videoWidth || this.source.width;\n            this.realHeight = this.source.naturalHeight || this.source.videoHeight || this.source.height;\n\n            this._updateDimensions();\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Update dimensions from real values\n     */\n    _updateDimensions()\n    {\n        this.width = this.realWidth / this.resolution;\n        this.height = this.realHeight / this.resolution;\n\n        this.isPowerOfTwo = bitTwiddle.isPow2(this.realWidth) && bitTwiddle.isPow2(this.realHeight);\n    }\n\n    /**\n     * Load a source.\n     *\n     * If the source is not-immediately-available, such as an image that needs to be\n     * downloaded, then the 'loaded' or 'error' event will be dispatched in the future\n     * and `hasLoaded` will remain false after this call.\n     *\n     * The logic state after calling `loadSource` directly or indirectly (eg. `fromImage`, `new BaseTexture`) is:\n     *\n     *     if (texture.hasLoaded) {\n     *        // texture ready for use\n     *     } else if (texture.isLoading) {\n     *        // listen to 'loaded' and/or 'error' events on texture\n     *     } else {\n     *        // not loading, not going to load UNLESS the source is reloaded\n     *        // (it may still make sense to listen to the events)\n     *     }\n     *\n     * @protected\n     * @param {HTMLImageElement|HTMLCanvasElement} source - the source object of the texture.\n     */\n    loadSource(source)\n    {\n        const wasLoading = this.isLoading;\n\n        this.hasLoaded = false;\n        this.isLoading = false;\n\n        if (wasLoading && this.source)\n        {\n            this.source.onload = null;\n            this.source.onerror = null;\n        }\n\n        const firstSourceLoaded = !this.source;\n\n        this.source = source;\n\n        // Apply source if loaded. Otherwise setup appropriate loading monitors.\n        if (((source.src && source.complete) || source.getContext) && source.width && source.height)\n        {\n            this._updateImageType();\n\n            if (this.imageType === 'svg')\n            {\n                this._loadSvgSource();\n            }\n            else\n            {\n                this._sourceLoaded();\n            }\n\n            if (firstSourceLoaded)\n            {\n                // send loaded event if previous source was null and we have been passed a pre-loaded IMG element\n                this.emit('loaded', this);\n            }\n        }\n        else if (!source.getContext)\n        {\n            // Image fail / not ready\n            this.isLoading = true;\n\n            const scope = this;\n\n            source.onload = () =>\n            {\n                scope._updateImageType();\n                source.onload = null;\n                source.onerror = null;\n\n                if (!scope.isLoading)\n                {\n                    return;\n                }\n\n                scope.isLoading = false;\n                scope._sourceLoaded();\n\n                if (scope.imageType === 'svg')\n                {\n                    scope._loadSvgSource();\n\n                    return;\n                }\n\n                scope.emit('loaded', scope);\n            };\n\n            source.onerror = () =>\n            {\n                source.onload = null;\n                source.onerror = null;\n\n                if (!scope.isLoading)\n                {\n                    return;\n                }\n\n                scope.isLoading = false;\n                scope.emit('error', scope);\n            };\n\n            // Per http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element\n            //   \"The value of `complete` can thus change while a script is executing.\"\n            // So complete needs to be re-checked after the callbacks have been added..\n            // NOTE: complete will be true if the image has no src so best to check if the src is set.\n            if (source.complete && source.src)\n            {\n                // ..and if we're complete now, no need for callbacks\n                source.onload = null;\n                source.onerror = null;\n\n                if (scope.imageType === 'svg')\n                {\n                    scope._loadSvgSource();\n\n                    return;\n                }\n\n                this.isLoading = false;\n\n                if (source.width && source.height)\n                {\n                    this._sourceLoaded();\n\n                    // If any previous subscribers possible\n                    if (wasLoading)\n                    {\n                        this.emit('loaded', this);\n                    }\n                }\n                // If any previous subscribers possible\n                else if (wasLoading)\n                {\n                    this.emit('error', this);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates type of the source image.\n     */\n    _updateImageType()\n    {\n        if (!this.imageUrl)\n        {\n            return;\n        }\n\n        const dataUri = decomposeDataUri(this.imageUrl);\n        let imageType;\n\n        if (dataUri && dataUri.mediaType === 'image')\n        {\n            // Check for subType validity\n            const firstSubType = dataUri.subType.split('+')[0];\n\n            imageType = getUrlFileExtension(`.${firstSubType}`);\n\n            if (!imageType)\n            {\n                throw new Error('Invalid image type in data URI.');\n            }\n        }\n        else\n        {\n            imageType = getUrlFileExtension(this.imageUrl);\n\n            if (!imageType)\n            {\n                imageType = 'png';\n            }\n        }\n\n        this.imageType = imageType;\n    }\n\n    /**\n     * Checks if `source` is an SVG image and whether it's loaded via a URL or a data URI. Then calls\n     * `_loadSvgSourceUsingDataUri` or `_loadSvgSourceUsingXhr`.\n     */\n    _loadSvgSource()\n    {\n        if (this.imageType !== 'svg')\n        {\n            // Do nothing if source is not svg\n            return;\n        }\n\n        const dataUri = decomposeDataUri(this.imageUrl);\n\n        if (dataUri)\n        {\n            this._loadSvgSourceUsingDataUri(dataUri);\n        }\n        else\n        {\n            // We got an URL, so we need to do an XHR to check the svg size\n            this._loadSvgSourceUsingXhr();\n        }\n    }\n\n    /**\n     * Reads an SVG string from data URI and then calls `_loadSvgSourceUsingString`.\n     *\n     * @param {string} dataUri - The data uri to load from.\n     */\n    _loadSvgSourceUsingDataUri(dataUri)\n    {\n        let svgString;\n\n        if (dataUri.encoding === 'base64')\n        {\n            if (!atob)\n            {\n                throw new Error('Your browser doesn\\'t support base64 conversions.');\n            }\n            svgString = atob(dataUri.data);\n        }\n        else\n        {\n            svgString = dataUri.data;\n        }\n\n        this._loadSvgSourceUsingString(svgString);\n    }\n\n    /**\n     * Loads an SVG string from `imageUrl` using XHR and then calls `_loadSvgSourceUsingString`.\n     */\n    _loadSvgSourceUsingXhr()\n    {\n        const svgXhr = new XMLHttpRequest();\n\n        // This throws error on IE, so SVG Document can't be used\n        // svgXhr.responseType = 'document';\n\n        // This is not needed since we load the svg as string (breaks IE too)\n        // but overrideMimeType() can be used to force the response to be parsed as XML\n        // svgXhr.overrideMimeType('image/svg+xml');\n\n        svgXhr.onload = () =>\n        {\n            if (svgXhr.readyState !== svgXhr.DONE || svgXhr.status !== 200)\n            {\n                throw new Error('Failed to load SVG using XHR.');\n            }\n\n            this._loadSvgSourceUsingString(svgXhr.response);\n        };\n\n        svgXhr.onerror = () => this.emit('error', this);\n\n        svgXhr.open('GET', this.imageUrl, true);\n        svgXhr.send();\n    }\n\n    /**\n     * Loads texture using an SVG string. The original SVG Image is stored as `origSource` and the\n     * created canvas is the new `source`. The SVG is scaled using `sourceScale`. Called by\n     * `_loadSvgSourceUsingXhr` or `_loadSvgSourceUsingDataUri`.\n     *\n     * @param  {string} svgString SVG source as string\n     *\n     * @fires loaded\n     */\n    _loadSvgSourceUsingString(svgString)\n    {\n        const svgSize = getSvgSize(svgString);\n\n        const svgWidth = svgSize.width;\n        const svgHeight = svgSize.height;\n\n        if (!svgWidth || !svgHeight)\n        {\n            throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n        }\n\n        // Scale realWidth and realHeight\n        this.realWidth = Math.round(svgWidth * this.sourceScale);\n        this.realHeight = Math.round(svgHeight * this.sourceScale);\n\n        this._updateDimensions();\n\n        // Create a canvas element\n        const canvas = document.createElement('canvas');\n\n        canvas.width = this.realWidth;\n        canvas.height = this.realHeight;\n        canvas._pixiId = `canvas_${uid()}`;\n\n        // Draw the Svg to the canvas\n        canvas\n            .getContext('2d')\n            .drawImage(this.source, 0, 0, svgWidth, svgHeight, 0, 0, this.realWidth, this.realHeight);\n\n        // Replace the original source image with the canvas\n        this.origSource = this.source;\n        this.source = canvas;\n\n        // Add also the canvas in cache (destroy clears by `imageUrl` and `source._pixiId`)\n        BaseTextureCache[canvas._pixiId] = this;\n\n        this.isLoading = false;\n        this._sourceLoaded();\n        this.emit('loaded', this);\n    }\n\n    /**\n     * Used internally to update the width, height, and some other tracking vars once\n     * a source has successfully loaded.\n     *\n     * @private\n     */\n    _sourceLoaded()\n    {\n        this.hasLoaded = true;\n        this.update();\n    }\n\n    /**\n     * Destroys this base texture\n     *\n     */\n    destroy()\n    {\n        if (this.imageUrl)\n        {\n            delete BaseTextureCache[this.imageUrl];\n            delete TextureCache[this.imageUrl];\n\n            this.imageUrl = null;\n\n            if (!navigator.isCocoonJS)\n            {\n                this.source.src = '';\n            }\n        }\n        // An svg source has both `imageUrl` and `__pixiId`, so no `else if` here\n        if (this.source && this.source._pixiId)\n        {\n            delete BaseTextureCache[this.source._pixiId];\n        }\n\n        this.source = null;\n\n        this.dispose();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     */\n    dispose()\n    {\n        this.emit('dispose', this);\n    }\n\n    /**\n     * Changes the source image of the texture.\n     * The original source must be an Image element.\n     *\n     * @param {string} newSrc - the path of the image\n     */\n    updateSourceImage(newSrc)\n    {\n        this.source.src = newSrc;\n\n        this.loadSource(this.source);\n    }\n\n    /**\n     * Helper function that creates a base texture from the given image url.\n     * If the image is not in the base texture cache it will be created and loaded.\n     *\n     * @static\n     * @param {string} imageUrl - The image url of the texture\n     * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n    {\n        let baseTexture = BaseTextureCache[imageUrl];\n\n        if (!baseTexture)\n        {\n            // new Image() breaks tex loading in some versions of Chrome.\n            // See https://code.google.com/p/chromium/issues/detail?id=238071\n            const image = new Image();// document.createElement('img');\n\n            if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0)\n            {\n                image.crossOrigin = determineCrossOrigin(imageUrl);\n            }\n\n            baseTexture = new BaseTexture(image, scaleMode);\n            baseTexture.imageUrl = imageUrl;\n\n            if (sourceScale)\n            {\n                baseTexture.sourceScale = sourceScale;\n            }\n\n            // if there is an @2x at the end of the url we are going to assume its a highres image\n            baseTexture.resolution = getResolutionOfUrl(imageUrl);\n\n            image.src = imageUrl; // Setting this triggers load\n\n            BaseTextureCache[imageUrl] = baseTexture;\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Helper function that creates a base texture from the given canvas element.\n     *\n     * @static\n     * @param {HTMLCanvasElement} canvas - The canvas element source of the texture\n     * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static fromCanvas(canvas, scaleMode)\n    {\n        if (!canvas._pixiId)\n        {\n            canvas._pixiId = `canvas_${uid()}`;\n        }\n\n        let baseTexture = BaseTextureCache[canvas._pixiId];\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture(canvas, scaleMode);\n            BaseTextureCache[canvas._pixiId] = baseTexture;\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element.\n     *\n     * @static\n     * @param {string|HTMLImageElement|HTMLCanvasElement} source - The source to create base texture from.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static from(source, scaleMode, sourceScale)\n    {\n        if (typeof source === 'string')\n        {\n            return BaseTexture.fromImage(source, undefined, scaleMode, sourceScale);\n        }\n        else if (source instanceof HTMLImageElement)\n        {\n            const imageUrl = source.src;\n            let baseTexture = BaseTextureCache[imageUrl];\n\n            if (!baseTexture)\n            {\n                baseTexture = new BaseTexture(source, scaleMode);\n                baseTexture.imageUrl = imageUrl;\n\n                if (sourceScale)\n                {\n                    baseTexture.sourceScale = sourceScale;\n                }\n\n                // if there is an @2x at the end of the url we are going to assume its a highres image\n                baseTexture.resolution = getResolutionOfUrl(imageUrl);\n\n                BaseTextureCache[imageUrl] = baseTexture;\n            }\n\n            return baseTexture;\n        }\n        else if (source instanceof HTMLCanvasElement)\n        {\n            return BaseTexture.fromCanvas(source, scaleMode);\n        }\n\n        // lets assume its a base texture!\n        return source;\n    }\n}\n"]}