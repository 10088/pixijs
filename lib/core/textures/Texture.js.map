{"version":3,"sources":["../../../src/core/textures/Texture.js"],"names":["Texture","baseTexture","frame","orig","trim","rotate","noFrame","Rectangle","_frame","valid","requiresUpdate","_uvs","_rotate","Number","Error","hasLoaded","width","height","on","onBaseTextureUpdated","once","onBaseTextureLoaded","_updateID","transform","update","emit","destroy","destroyBase","TextureCache","imageUrl","off","dispose","clone","_updateUvs","TextureUvs","set","fromImage","crossorigin","scaleMode","sourceScale","texture","BaseTexture","fromFrame","frameId","fromCanvas","canvas","fromVideo","video","fromVideoUrl","VideoBaseTexture","videoUrl","fromUrl","from","source","isVideo","match","HTMLImageElement","HTMLCanvasElement","HTMLVideoElement","fromLoader","name","undefined","BaseTextureCache","addTextureToCache","id","removeTextureFromCache","x","y","EventEmitter","createWhiteTexture","document","createElement","context","getContext","fillStyle","fillRect","removeAllHandlers","tex","_emptyDestroy","_emptyOn","_emptyOnce","_emptyEmit","EMPTY","WHITE"],"mappings":"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","file":"Texture.js","sourcesContent":["import BaseTexture from './BaseTexture';\nimport VideoBaseTexture from './VideoBaseTexture';\nimport TextureUvs from './TextureUvs';\nimport EventEmitter from 'eventemitter3';\nimport { Rectangle } from '../math';\nimport { TextureCache, BaseTextureCache, getResolutionOfUrl } from '../utils';\n\n/**\n * A texture stores the information that represents an image or part of an image. It cannot be added\n * to the display list directly. Instead use it as the texture for a Sprite. If no frame is provided\n * then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * let texture = PIXI.Texture.fromImage('assets/image.png');\n * let sprite1 = new PIXI.Sprite(texture);\n * let sprite2 = new PIXI.Sprite(texture);\n * ```\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n * ```js\n * var texture = PIXI.Texture.fromImage('assets/image.svg');\n * var sprite1 = new PIXI.Sprite(texture);\n * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class Texture extends EventEmitter\n{\n    /**\n     * @param {PIXI.BaseTexture} baseTexture - The base texture source to create the texture from\n     * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show\n     * @param {PIXI.Rectangle} [orig] - The area of original texture\n     * @param {PIXI.Rectangle} [trim] - Trimmed rectangle of original texture\n     * @param {number} [rotate] - indicates how the texture was rotated by texture packer. See {@link PIXI.GroupD8}\n     */\n    constructor(baseTexture, frame, orig, trim, rotate)\n    {\n        super();\n\n        /**\n         * Does this Texture have any frame data assigned to it?\n         *\n         * @member {boolean}\n         */\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        /**\n         * The base texture that this texture uses.\n         *\n         * @member {PIXI.BaseTexture}\n         */\n        this.baseTexture = baseTexture;\n\n        /**\n         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this._frame = frame;\n\n        /**\n         * This is the trimmed area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.trim = trim;\n\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean}\n         */\n        this.valid = false;\n\n        /**\n         * This will let a renderer know that a texture has been updated (used mainly for webGL uv updates)\n         *\n         * @member {boolean}\n         */\n        this.requiresUpdate = false;\n\n        /**\n         * The WebGL UV data cache.\n         *\n         * @member {PIXI.TextureUvs}\n         * @private\n         */\n        this._uvs = null;\n\n        /**\n         * This is the area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        if (baseTexture.hasLoaded)\n        {\n            if (this.noFrame)\n            {\n                frame = new Rectangle(0, 0, baseTexture.width, baseTexture.height);\n\n                // if there is no frame we should monitor for any base texture changes..\n                baseTexture.on('update', this.onBaseTextureUpdated, this);\n            }\n            this.frame = frame;\n        }\n        else\n        {\n            baseTexture.once('loaded', this.onBaseTextureLoaded, this);\n        }\n\n        /**\n         * Fired when the texture is updated. This happens if the frame or the baseTexture is updated.\n         *\n         * @event update\n         * @memberof PIXI.Texture#\n         * @protected\n         */\n\n        this._updateID = 0;\n\n        /**\n         * Extra field for extra plugins. May contain clamp settings and some matrices\n         * @type {Object}\n         */\n        this.transform = null;\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     */\n    update()\n    {\n        this.baseTexture.update();\n    }\n\n    /**\n     * Called when the base texture is loaded\n     *\n     * @private\n     * @param {PIXI.BaseTexture} baseTexture - The base texture.\n     */\n    onBaseTextureLoaded(baseTexture)\n    {\n        this._updateID++;\n\n        // TODO this code looks confusing.. boo to abusing getters and setters!\n        if (this.noFrame)\n        {\n            this.frame = new Rectangle(0, 0, baseTexture.width, baseTexture.height);\n        }\n        else\n        {\n            this.frame = this._frame;\n        }\n\n        this.baseTexture.on('update', this.onBaseTextureUpdated, this);\n        this.emit('update', this);\n    }\n\n    /**\n     * Called when the base texture is updated\n     *\n     * @private\n     * @param {PIXI.BaseTexture} baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture)\n    {\n        this._updateID++;\n\n        this._frame.width = baseTexture.width;\n        this._frame.height = baseTexture.height;\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well\n     */\n    destroy(destroyBase)\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (TextureCache[this.baseTexture.imageUrl])\n                {\n                    delete TextureCache[this.baseTexture.imageUrl];\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n            this.baseTexture.off('loaded', this.onBaseTextureLoaded, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        this.off('dispose', this.dispose, this);\n        this.off('update', this.update, this);\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     *\n     * @return {PIXI.Texture} The new texture\n     */\n    clone()\n    {\n        return new Texture(this.baseTexture, this.frame, this.orig, this.trim, this.rotate);\n    }\n\n    /**\n     * Updates the internal WebGL UV cache.\n     *\n     * @protected\n     */\n    _updateUvs()\n    {\n        if (!this._uvs)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a Texture object from the given image url.\n     * If the image is not in the texture cache it will be  created and loaded.\n     *\n     * @static\n     * @param {string} imageUrl - The image url of the texture\n     * @param {boolean} [crossorigin] - Whether requests should be treated as crossorigin\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with SVG images.\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n    {\n        let texture = TextureCache[imageUrl];\n\n        if (!texture)\n        {\n            texture = new Texture(BaseTexture.fromImage(imageUrl, crossorigin, scaleMode, sourceScale));\n            TextureCache[imageUrl] = texture;\n        }\n\n        return texture;\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n     * The frame ids are created when a Texture packer file has been loaded\n     *\n     * @static\n     * @param {string} frameId - The frame Id of the texture in the cache\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromFrame(frameId)\n    {\n        const texture = TextureCache[frameId];\n\n        if (!texture)\n        {\n            throw new Error(`The frameId \"${frameId}\" does not exist in the texture cache`);\n        }\n\n        return texture;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the given canvas element.\n     *\n     * @static\n     * @param {HTMLCanvasElement} canvas - The canvas element source of the texture\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromCanvas(canvas, scaleMode)\n    {\n        return new Texture(BaseTexture.fromCanvas(canvas, scaleMode));\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the given video element.\n     *\n     * @static\n     * @param {HTMLVideoElement|string} video - The URL or actual element of the video\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromVideo(video, scaleMode)\n    {\n        if (typeof video === 'string')\n        {\n            return Texture.fromVideoUrl(video, scaleMode);\n        }\n\n        return new Texture(VideoBaseTexture.fromVideo(video, scaleMode));\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the video url.\n     *\n     * @static\n     * @param {string} videoUrl - URL of the video\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromVideoUrl(videoUrl, scaleMode)\n    {\n        return new Texture(VideoBaseTexture.fromUrl(videoUrl, scaleMode));\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {number|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture}\n     *        source - Source to create texture from\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static from(source)\n    {\n        // TODO auto detect cross origin..\n        // TODO pass in scale mode?\n        if (typeof source === 'string')\n        {\n            const texture = TextureCache[source];\n\n            if (!texture)\n            {\n                // check if its a video..\n                const isVideo = source.match(/\\.(mp4|webm|ogg|h264|avi|mov)$/) !== null;\n\n                if (isVideo)\n                {\n                    return Texture.fromVideoUrl(source);\n                }\n\n                return Texture.fromImage(source);\n            }\n\n            return texture;\n        }\n        else if (source instanceof HTMLImageElement)\n        {\n            return new Texture(BaseTexture.from(source));\n        }\n        else if (source instanceof HTMLCanvasElement)\n        {\n            return Texture.fromCanvas(source);\n        }\n        else if (source instanceof HTMLVideoElement)\n        {\n            return Texture.fromVideo(source);\n        }\n        else if (source instanceof BaseTexture)\n        {\n            return new Texture(source);\n        }\n\n        // lets assume its a texture!\n        return source;\n    }\n\n    /**\n     * Create a texture from a source and add to the cache.\n     *\n     * @static\n     * @param {HTMLImageElement|HTMLCanvasElement} source - The input source.\n     * @param {String} imageUrl - File name of texture, for cache and resolving resolution.\n     * @param {String} [name] - Human readible name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @return {PIXI.Texture} Output texture\n     */\n    static fromLoader(source, imageUrl, name)\n    {\n        const baseTexture = new BaseTexture(source, undefined, getResolutionOfUrl(imageUrl));\n        const texture = new Texture(baseTexture);\n\n        baseTexture.imageUrl = imageUrl;\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for fromFrame and fromImage fucntions\n        BaseTextureCache[name] = baseTexture;\n        TextureCache[name] = texture;\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            BaseTextureCache[imageUrl] = baseTexture;\n            TextureCache[imageUrl] = texture;\n        }\n\n        return texture;\n    }\n\n    /**\n     * Adds a texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @static\n     * @param {PIXI.Texture} texture - The Texture to add to the cache.\n     * @param {string} id - The id that the texture will be stored against.\n     */\n    static addTextureToCache(texture, id)\n    {\n        TextureCache[id] = texture;\n    }\n\n    /**\n     * Remove a texture from the global TextureCache.\n     *\n     * @static\n     * @param {string} id - The id of the texture to be removed\n     * @return {PIXI.Texture} The texture that was removed\n     */\n    static removeTextureFromCache(id)\n    {\n        const texture = TextureCache[id];\n\n        delete TextureCache[id];\n        delete BaseTextureCache[id];\n\n        return texture;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     *\n     * @member {PIXI.Rectangle}\n     */\n    get frame()\n    {\n        return this._frame;\n    }\n\n    set frame(frame) // eslint-disable-line require-jsdoc\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        if (frame.x + frame.width > this.baseTexture.width || frame.y + frame.height > this.baseTexture.height)\n        {\n            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '\n                + `X: ${frame.x} + ${frame.width} > ${this.baseTexture.width} `\n                + `Y: ${frame.y} + ${frame.height} > ${this.baseTexture.height}`);\n        }\n\n        // this.valid = frame && frame.width && frame.height && this.baseTexture.source && this.baseTexture.hasLoaded;\n        this.valid = frame && frame.width && frame.height && this.baseTexture.hasLoaded;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this._updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.GroupD8} for explanation\n     *\n     * @member {number}\n     */\n    get rotate()\n    {\n        return this._rotate;\n    }\n\n    set rotate(rotate) // eslint-disable-line require-jsdoc\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this._updateUvs();\n        }\n    }\n\n    /**\n     * The width of the Texture in pixels.\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this.orig.width;\n    }\n\n    /**\n     * The height of the Texture in pixels.\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this.orig.height;\n    }\n}\n\nfunction createWhiteTexture()\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 10;\n    canvas.height = 10;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = 'white';\n    context.fillRect(0, 0, 10, 10);\n\n    return new Texture(new BaseTexture(canvas));\n}\n\nfunction removeAllHandlers(tex)\n{\n    tex.destroy = function _emptyDestroy() { /* empty */ };\n    tex.on = function _emptyOn() { /* empty */ };\n    tex.once = function _emptyOnce() { /* empty */ };\n    tex.emit = function _emptyEmit() { /* empty */ };\n}\n\n/**\n * An empty texture, used often to not have to create multiple empty textures.\n * Can not be destroyed.\n *\n * @static\n * @constant\n */\nTexture.EMPTY = new Texture(new BaseTexture());\nremoveAllHandlers(Texture.EMPTY);\nremoveAllHandlers(Texture.EMPTY.baseTexture);\n\n/**\n * A white texture of 10x10 size, used for graphics and other things\n * Can not be destroyed.\n *\n * @static\n * @constant\n */\nTexture.WHITE = createWhiteTexture();\nremoveAllHandlers(Texture.WHITE);\nremoveAllHandlers(Texture.WHITE.baseTexture);\n"]}