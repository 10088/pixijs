{"version":3,"sources":["../../../../src/core/sprites/canvas/CanvasSpriteRenderer.js"],"names":["canvasRenderWorldTransform","Matrix","CanvasSpriteRenderer","renderer","render","sprite","texture","_texture","width","_frame","height","wt","transform","worldTransform","dx","dy","orig","baseTexture","source","setBlendMode","blendMode","valid","context","globalAlpha","worldAlpha","smoothingEnabled","scaleMode","SCALE_MODES","LINEAR","smoothProperty","trim","x","anchor","y","rotate","copy","GroupD8","matrixAppendRotationInv","roundPixels","setTransform","a","b","c","d","tx","resolution","ty","tint","cachedTint","tintedTexture","CanvasTinter","getTintedTexture","drawImage","destroy","CanvasRenderer","registerPlugin"],"mappings":"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","file":"CanvasSpriteRenderer.js","sourcesContent":["import CanvasRenderer from '../../renderers/canvas/CanvasRenderer';\nimport { SCALE_MODES } from '../../const';\nimport { Matrix, GroupD8 } from '../../math';\nimport CanvasTinter from './CanvasTinter';\n\nconst canvasRenderWorldTransform = new Matrix();\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasSpriteRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/CanvasSpriteRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class CanvasSpriteRenderer\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer -The renderer sprite this batch works for.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the sprite object.\n     *\n     * @param {PIXI.Sprite} sprite - the sprite to render when using this spritebatch\n     */\n    render(sprite)\n    {\n        const texture = sprite._texture;\n        const renderer = this.renderer;\n\n        const width = texture._frame.width;\n        const height = texture._frame.height;\n\n        let wt = sprite.transform.worldTransform;\n        let dx = 0;\n        let dy = 0;\n\n        if (texture.orig.width <= 0 || texture.orig.height <= 0 || !texture.baseTexture.source)\n        {\n            return;\n        }\n\n        renderer.setBlendMode(sprite.blendMode);\n\n        //  Ignore null sources\n        if (texture.valid)\n        {\n            renderer.context.globalAlpha = sprite.worldAlpha;\n\n            // If smoothingEnabled is supported and we need to change the smoothing property for sprite texture\n            const smoothingEnabled = texture.baseTexture.scaleMode === SCALE_MODES.LINEAR;\n\n            if (renderer.smoothProperty && renderer.context[renderer.smoothProperty] !== smoothingEnabled)\n            {\n                renderer.context[renderer.smoothProperty] = smoothingEnabled;\n            }\n\n            if (texture.trim)\n            {\n                dx = (texture.trim.width / 2) + texture.trim.x - (sprite.anchor.x * texture.orig.width);\n                dy = (texture.trim.height / 2) + texture.trim.y - (sprite.anchor.y * texture.orig.height);\n            }\n            else\n            {\n                dx = (0.5 - sprite.anchor.x) * texture.orig.width;\n                dy = (0.5 - sprite.anchor.y) * texture.orig.height;\n            }\n\n            if (texture.rotate)\n            {\n                wt.copy(canvasRenderWorldTransform);\n                wt = canvasRenderWorldTransform;\n                GroupD8.matrixAppendRotationInv(wt, texture.rotate, dx, dy);\n                // the anchor has already been applied above, so lets set it to zero\n                dx = 0;\n                dy = 0;\n            }\n\n            dx -= width / 2;\n            dy -= height / 2;\n\n            // Allow for pixel rounding\n            if (renderer.roundPixels)\n            {\n                renderer.context.setTransform(\n                    wt.a,\n                    wt.b,\n                    wt.c,\n                    wt.d,\n                    (wt.tx * renderer.resolution) | 0,\n                    (wt.ty * renderer.resolution) | 0\n                );\n\n                dx = dx | 0;\n                dy = dy | 0;\n            }\n            else\n            {\n                renderer.context.setTransform(\n                    wt.a,\n                    wt.b,\n                    wt.c,\n                    wt.d,\n                    wt.tx * renderer.resolution,\n                    wt.ty * renderer.resolution\n                );\n            }\n\n            const resolution = texture.baseTexture.resolution;\n\n            if (sprite.tint !== 0xFFFFFF)\n            {\n                if (sprite.cachedTint !== sprite.tint)\n                {\n                    sprite.cachedTint = sprite.tint;\n\n                    // TODO clean up caching - how to clean up the caches?\n                    sprite.tintedTexture = CanvasTinter.getTintedTexture(sprite, sprite.tint);\n                }\n\n                renderer.context.drawImage(\n                    sprite.tintedTexture,\n                    0,\n                    0,\n                    width * resolution,\n                    height * resolution,\n                    dx * renderer.resolution,\n                    dy * renderer.resolution,\n                    width * renderer.resolution,\n                    height * renderer.resolution\n                );\n            }\n            else\n            {\n                renderer.context.drawImage(\n                    texture.baseTexture.source,\n                    texture._frame.x * resolution,\n                    texture._frame.y * resolution,\n                    width * resolution,\n                    height * resolution,\n                    dx * renderer.resolution,\n                    dy * renderer.resolution,\n                    width * renderer.resolution,\n                    height * renderer.resolution\n                );\n            }\n        }\n    }\n\n    /**\n     * destroy the sprite object.\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\nCanvasRenderer.registerPlugin('sprite', CanvasSpriteRenderer);\n"]}