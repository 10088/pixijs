{"version":3,"sources":["../../../../src/core/sprites/webgl/SpriteRenderer.js"],"names":["TICK","TEXTURE_TICK","SpriteRenderer","renderer","vertSize","vertByteSize","size","settings","SPRITE_BATCH_SIZE","buffers","i","bitTwiddle","nextPow2","push","Buffer","indices","shader","currentIndex","groups","k","textures","textureCount","ids","start","blend","sprites","vertexBuffers","vaos","vaoMax","vertexCount","on","onPrerender","onContextChange","gl","legacy","MAX_TEXTURES","Math","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","SPRITE_MAX_TEXTURES","indexBuffer","glCore","GLBuffer","createIndexBuffer","STATIC_DRAW","bindVao","createVertexBuffer","STREAM_DRAW","createVao","addIndex","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","UNSIGNED_SHORT","aColor","UNSIGNED_BYTE","aTextureId","vao","currentBlendMode","boundTextures","Array","render","sprite","flush","_texture","_uvs","np2","log2","buffer","float32View","uint32View","rendererBoundTextures","touch","textureGC","count","index","nextTexture","currentTexture","groupCount","currentGroup","vertexData","uvs","blendMode","_virtalBoundId","baseTexture","_enabled","touched","j","tIndex","t","uvsUint32","roundPixels","resolution","_tintRGB","worldAlpha","CAN_UPLOAD_SAME_BUFFER","upload","vertices","group","groupTextureCount","bindTexture","state","setBlendMode","drawElements","TRIANGLES","bindShader","bind","stop","destroy","off","length","ObjectRenderer","WebGLRenderer","registerPlugin"],"mappings":"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","file":"SpriteRenderer.js","sourcesContent":["import ObjectRenderer from '../../renderers/webgl/utils/ObjectRenderer';\nimport WebGLRenderer from '../../renderers/webgl/WebGLRenderer';\nimport createIndicesForQuads from '../../utils/createIndicesForQuads';\nimport generateMultiTextureShader from './generateMultiTextureShader';\nimport checkMaxIfStatmentsInShader from '../../renderers/webgl/utils/checkMaxIfStatmentsInShader';\nimport Buffer from './BatchBuffer';\nimport settings from '../../settings';\nimport glCore from 'pixi-gl-core';\nimport bitTwiddle from 'bit-twiddle';\n\nlet TICK = 0;\nlet TEXTURE_TICK = 0;\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * @class\n * @private\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport default class SpriteRenderer extends ObjectRenderer\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this sprite batch works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * Number of values sent in the vertex buffer.\n         * aVertexPosition(2), aTextureCoord(1), aColor(1), aTextureId(1) = 5\n         *\n         * @member {number}\n         */\n        this.vertSize = 5;\n\n        /**\n         * The size of the vertex information in bytes.\n         *\n         * @member {number}\n         */\n        this.vertByteSize = this.vertSize * 4;\n\n        /**\n         * The number of images in the SpriteRenderer before it flushes.\n         *\n         * @member {number}\n         */\n        this.size = settings.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n\n        // the total number of bytes in our batch\n        // let numVerts = this.size * 4 * this.vertByteSize;\n\n        this.buffers = [];\n        for (let i = 1; i <= bitTwiddle.nextPow2(this.size); i *= 2)\n        {\n            this.buffers.push(new Buffer(i * 4 * this.vertByteSize));\n        }\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(this.size);\n\n        /**\n         * The default shaders that is used if a sprite doesn't have a more specific one.\n         * there is a shader for each number of textures that can be rendererd.\n         * These shaders will also be generated on the fly as required.\n         * @member {PIXI.Shader[]}\n         */\n        this.shader = null;\n\n        this.currentIndex = 0;\n        this.groups = [];\n\n        for (let k = 0; k < this.size; k++)\n        {\n            this.groups[k] = { textures: [], textureCount: 0, ids: [], size: 0, start: 0, blend: 0 };\n        }\n\n        this.sprites = [];\n\n        this.vertexBuffers = [];\n        this.vaos = [];\n\n        this.vaoMax = 2;\n        this.vertexCount = 0;\n\n        this.renderer.on('prerender', this.onPrerender, this);\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    onContextChange()\n    {\n        const gl = this.renderer.gl;\n\n        if (this.renderer.legacy)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            // step 1: first check max textures the GPU can handle.\n            this.MAX_TEXTURES = Math.min(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), settings.SPRITE_MAX_TEXTURES);\n\n            // step 2: check the maximum number of if statements the shader can have too..\n            this.MAX_TEXTURES = checkMaxIfStatmentsInShader(this.MAX_TEXTURES, gl);\n        }\n\n        const shader = this.shader = generateMultiTextureShader(gl, this.MAX_TEXTURES);\n\n        // create a couple of buffers\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        // we use the second shader as the first one depending on your browser may omit aTextureId\n        // as it is not used by the shader so is optimized out.\n\n        this.renderer.bindVao(null);\n\n        for (let i = 0; i < this.vaoMax; i++)\n        {\n            this.vertexBuffers[i] = glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\n\n            /* eslint-disable max-len */\n\n            // build the vao object that will render..\n            this.vaos[i] = this.renderer.createVao()\n                .addIndex(this.indexBuffer)\n                .addAttribute(this.vertexBuffers[i], shader.attributes.aVertexPosition, gl.FLOAT, false, this.vertByteSize, 0)\n                .addAttribute(this.vertexBuffers[i], shader.attributes.aTextureCoord, gl.UNSIGNED_SHORT, true, this.vertByteSize, 2 * 4)\n                .addAttribute(this.vertexBuffers[i], shader.attributes.aColor, gl.UNSIGNED_BYTE, true, this.vertByteSize, 3 * 4);\n\n            if (shader.attributes.aTextureId)\n            {\n                this.vaos[i].addAttribute(this.vertexBuffers[i], shader.attributes.aTextureId, gl.FLOAT, false, this.vertByteSize, 4 * 4);\n            }\n\n            /* eslint-enable max-len */\n        }\n\n        this.vao = this.vaos[0];\n        this.currentBlendMode = 99999;\n\n        this.boundTextures = new Array(this.MAX_TEXTURES);\n    }\n\n    /**\n     * Called before the renderer starts rendering.\n     *\n     */\n    onPrerender()\n    {\n        this.vertexCount = 0;\n    }\n\n    /**\n     * Renders the sprite object.\n     *\n     * @param {PIXI.Sprite} sprite - the sprite to render when using this spritebatch\n     */\n    render(sprite)\n    {\n        // TODO set blend modes..\n        // check texture..\n        if (this.currentIndex >= this.size)\n        {\n            this.flush();\n        }\n\n        // get the uvs for the texture\n\n        // if the uvs have not updated then no point rendering just yet!\n        if (!sprite._texture._uvs)\n        {\n            return;\n        }\n\n        // push a texture.\n        // increment the batchsize\n        this.sprites[this.currentIndex++] = sprite;\n    }\n\n    /**\n     * Renders the content and empties the current batch.\n     *\n     */\n    flush()\n    {\n        if (this.currentIndex === 0)\n        {\n            return;\n        }\n\n        const gl = this.renderer.gl;\n        const MAX_TEXTURES = this.MAX_TEXTURES;\n\n        const np2 = bitTwiddle.nextPow2(this.currentIndex);\n        const log2 = bitTwiddle.log2(np2);\n        const buffer = this.buffers[log2];\n\n        const sprites = this.sprites;\n        const groups = this.groups;\n\n        const float32View = buffer.float32View;\n        const uint32View = buffer.uint32View;\n\n        const boundTextures = this.boundTextures;\n        const rendererBoundTextures = this.renderer.boundTextures;\n        const touch = this.renderer.textureGC.count;\n\n        let index = 0;\n        let nextTexture;\n        let currentTexture;\n        let groupCount = 1;\n        let textureCount = 0;\n        let currentGroup = groups[0];\n        let vertexData;\n        let uvs;\n        let blendMode = sprites[0].blendMode;\n\n        currentGroup.textureCount = 0;\n        currentGroup.start = 0;\n        currentGroup.blend = blendMode;\n\n        TICK++;\n\n        let i;\n\n        // copy textures..\n        for (i = 0; i < MAX_TEXTURES; ++i)\n        {\n            boundTextures[i] = rendererBoundTextures[i];\n            boundTextures[i]._virtalBoundId = i;\n        }\n\n        for (i = 0; i < this.currentIndex; ++i)\n        {\n            // upload the sprite elemetns...\n            // they have all ready been calculated so we just need to push them into the buffer.\n            const sprite = sprites[i];\n\n            nextTexture = sprite._texture.baseTexture;\n\n            if (blendMode !== sprite.blendMode)\n            {\n                // finish a group..\n                blendMode = sprite.blendMode;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._enabled !== TICK)\n                {\n                    if (textureCount === MAX_TEXTURES)\n                    {\n                        TICK++;\n\n                        currentGroup.size = i - currentGroup.start;\n\n                        textureCount = 0;\n\n                        currentGroup = groups[groupCount++];\n                        currentGroup.blend = blendMode;\n                        currentGroup.textureCount = 0;\n                        currentGroup.start = i;\n                    }\n\n                    nextTexture.touched = touch;\n\n                    if (nextTexture._virtalBoundId === -1)\n                    {\n                        for (let j = 0; j < MAX_TEXTURES; ++j)\n                        {\n                            const tIndex = (j + TEXTURE_TICK) % MAX_TEXTURES;\n\n                            const t = boundTextures[tIndex];\n\n                            if (t._enabled !== TICK)\n                            {\n                                TEXTURE_TICK++;\n\n                                t._virtalBoundId = -1;\n\n                                nextTexture._virtalBoundId = tIndex;\n\n                                boundTextures[tIndex] = nextTexture;\n                                break;\n                            }\n                        }\n                    }\n\n                    nextTexture._enabled = TICK;\n\n                    currentGroup.textureCount++;\n                    currentGroup.ids[textureCount] = nextTexture._virtalBoundId;\n                    currentGroup.textures[textureCount++] = nextTexture;\n                }\n            }\n\n            vertexData = sprite.vertexData;\n\n            // TODO this sum does not need to be set each frame..\n            uvs = sprite._texture._uvs.uvsUint32;\n\n            if (this.renderer.roundPixels)\n            {\n                const resolution = this.renderer.resolution;\n\n                // xy\n                float32View[index] = ((vertexData[0] * resolution) | 0) / resolution;\n                float32View[index + 1] = ((vertexData[1] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 5] = ((vertexData[2] * resolution) | 0) / resolution;\n                float32View[index + 6] = ((vertexData[3] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 10] = ((vertexData[4] * resolution) | 0) / resolution;\n                float32View[index + 11] = ((vertexData[5] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 15] = ((vertexData[6] * resolution) | 0) / resolution;\n                float32View[index + 16] = ((vertexData[7] * resolution) | 0) / resolution;\n            }\n            else\n            {\n                // xy\n                float32View[index] = vertexData[0];\n                float32View[index + 1] = vertexData[1];\n\n                // xy\n                float32View[index + 5] = vertexData[2];\n                float32View[index + 6] = vertexData[3];\n\n                // xy\n                float32View[index + 10] = vertexData[4];\n                float32View[index + 11] = vertexData[5];\n\n                // xy\n                float32View[index + 15] = vertexData[6];\n                float32View[index + 16] = vertexData[7];\n            }\n\n            uint32View[index + 2] = uvs[0];\n            uint32View[index + 7] = uvs[1];\n            uint32View[index + 12] = uvs[2];\n            uint32View[index + 17] = uvs[3];\n\n            /* eslint-disable max-len */\n            uint32View[index + 3] = uint32View[index + 8] = uint32View[index + 13] = uint32View[index + 18] = sprite._tintRGB + (Math.min(sprite.worldAlpha, 1) * 255 << 24);\n\n            float32View[index + 4] = float32View[index + 9] = float32View[index + 14] = float32View[index + 19] = nextTexture._virtalBoundId;\n            /* eslint-enable max-len */\n\n            index += 20;\n        }\n\n        currentGroup.size = i - currentGroup.start;\n\n        if (!settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // this is still needed for IOS performance..\n            // it really does not like uploading to the same buffer in a single frame!\n            if (this.vaoMax <= this.vertexCount)\n            {\n                this.vaoMax++;\n                this.vertexBuffers[this.vertexCount] = glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\n\n                /* eslint-disable max-len */\n\n                // build the vao object that will render..\n                this.vaos[this.vertexCount] = this.renderer.createVao()\n                    .addIndex(this.indexBuffer)\n                    .addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aVertexPosition, gl.FLOAT, false, this.vertByteSize, 0)\n                    .addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aTextureCoord, gl.UNSIGNED_SHORT, true, this.vertByteSize, 2 * 4)\n                    .addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aColor, gl.UNSIGNED_BYTE, true, this.vertByteSize, 3 * 4);\n\n                if (this.shader.attributes.aTextureId)\n                {\n                    this.vaos[this.vertexCount].addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aTextureId, gl.FLOAT, false, this.vertByteSize, 4 * 4);\n                }\n\n                /* eslint-enable max-len */\n            }\n\n            this.renderer.bindVao(this.vaos[this.vertexCount]);\n\n            this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, false);\n\n            this.vertexCount++;\n        }\n        else\n        {\n            // lets use the faster option, always use buffer number 0\n            this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, true);\n        }\n\n        for (i = 0; i < MAX_TEXTURES; ++i)\n        {\n            rendererBoundTextures[i]._virtalBoundId = -1;\n        }\n\n        // render the groups..\n        for (i = 0; i < groupCount; ++i)\n        {\n            const group = groups[i];\n            const groupTextureCount = group.textureCount;\n\n            for (let j = 0; j < groupTextureCount; j++)\n            {\n                currentTexture = group.textures[j];\n\n                // reset virtual ids..\n                // lets do a quick check..\n                if (rendererBoundTextures[group.ids[j]] !== currentTexture)\n                {\n                    this.renderer.bindTexture(currentTexture, group.ids[j], true);\n                }\n\n                // reset the virtualId..\n                currentTexture._virtalBoundId = -1;\n            }\n\n            // set the blend mode..\n            this.renderer.state.setBlendMode(group.blend);\n\n            gl.drawElements(gl.TRIANGLES, group.size * 6, gl.UNSIGNED_SHORT, group.start * 6 * 2);\n        }\n\n        // reset elements for the next flush\n        this.currentIndex = 0;\n    }\n\n    /**\n     * Starts a new sprite batch.\n     */\n    start()\n    {\n        this.renderer.bindShader(this.shader);\n\n        if (settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // bind buffer #0, we don't need others\n            this.renderer.bindVao(this.vaos[this.vertexCount]);\n\n            this.vertexBuffers[this.vertexCount].bind();\n        }\n    }\n\n    /**\n     * Stops and flushes the current batch.\n     *\n     */\n    stop()\n    {\n        this.flush();\n    }\n\n    /**\n     * Destroys the SpriteRenderer.\n     *\n     */\n    destroy()\n    {\n        for (let i = 0; i < this.vaoMax; i++)\n        {\n            if (this.vertexBuffers[i])\n            {\n                this.vertexBuffers[i].destroy();\n            }\n            if (this.vaos[i])\n            {\n                this.vaos[i].destroy();\n            }\n        }\n\n        if (this.indexBuffer)\n        {\n            this.indexBuffer.destroy();\n        }\n\n        this.renderer.off('prerender', this.onPrerender, this);\n\n        super.destroy();\n\n        if (this.shader)\n        {\n            this.shader.destroy();\n            this.shader = null;\n        }\n\n        this.vertexBuffers = null;\n        this.vaos = null;\n        this.indexBuffer = null;\n        this.indices = null;\n\n        this.sprites = null;\n\n        for (let i = 0; i < this.buffers.length; ++i)\n        {\n            this.buffers[i].destroy();\n        }\n    }\n}\n\nWebGLRenderer.registerPlugin('sprite', SpriteRenderer);\n"]}